#não faz nada
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 3
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 3
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 3
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 2
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
if (2 < 3){
a <- 2
a
}
if (2 < 3){
a <- 2
a
}
if (2 < 3){
a <- 2
a
}
if (2 < 3){
a <- 2
a
}
if (2 > 3){
a <- 2
a
}
if (2 > 3){
a <- 2
a
}
if (2 > 3){
a <- 2
a
}
if (2 > 3){
a <- 2
a
}
is.integer(5/2)
!is.integer(5/2)
ceiling(2.5)
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 2
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
# Agora sim vou calcular o mrp até o fim...
# Vou calcular até que o período seja igual à soma abaixo
while (per <= nper - 1 - lt - nes){
# Estoque disponível antes da semana que estou olhando
mrp$epd[per+lt-1] <- mrp$epd[per+lt-2] + mrp$rp[per+lt-1] - mrp$nb[per+lt-1]
# Quanto preciso produzir ?
# Se o que eu vou ter antes do período + lead time form maior que o estoque de segurança
if (mrp$epd[per+lt-1] - mrp$nb[per+lt] >= es ){
# Eu não preciso produzir nada
mrp$plo[per] <- 0
# Mas se for menor que o estoque de segurança...
}else{
# Aí eu teria que produzir exatamente O que eu terei + o meu estoque de segurança
mrp$plo[per] <- es +  mrp$nb[per+lt] - mrp$epd[per+lt-1]
# No caso de Produzir, eu tenho que respeitar meu lote mínimo:
if (mrp$plo[per] < lmin ){
mrp$plo[per] <- lmin
}
# Também tenho que respeitar meu lote múltiplo
if (!is.integer(mrp$plo[per]/lmul)){
# Se deu um lote quebrado, vou produzir o múltiplo imediatamente superior à quantidade necessária
mrp$plo[per] <- ceiling(mrp$plo[per]/lmul)*lmul
}
}
View(mrp)
# Saídas / Entradas:
# RPi (Recebimentos Programados) - Indica quanto do material será recebido no periodo i.
# EPDi (Estoque Projetado Disponível) - Indica qual será o estoque projetado No FIM do período i.
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 2
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
# Agora sim vou calcular o mrp até o fim...
# Vou calcular até que o período seja igual à soma abaixo
while (per <= nper - 1 - lt - nes){
# Estoque disponível antes da semana que estou olhando
mrp$epd[per+lt-1] <- mrp$epd[per+lt-2] + mrp$rp[per+lt-1] - mrp$nb[per+lt-1]
# Quanto preciso produzir ?
# Se o que eu vou ter antes do período + lead time form maior que o estoque de segurança
if (mrp$epd[per+lt-1] - mrp$nb[per+lt] >= es ){
# Eu não preciso produzir nada
mrp$plo[per] <- 0
# Mas se for menor que o estoque de segurança...
}else{
# Aí eu teria que produzir exatamente O que eu terei + o meu estoque de segurança
mrp$plo[per] <- es +  mrp$nb[per+lt] - mrp$epd[per+lt-1]
# No caso de Produzir, eu tenho que respeitar meu lote mínimo:
if (mrp$plo[per] < lmin ){
mrp$plo[per] <- lmin
}
# Também tenho que respeitar meu lote múltiplo
if (!is.integer(mrp$plo[per]/lmul)){
# Se deu um lote quebrado, vou produzir o múltiplo imediatamente superior à quantidade necessária
mrp$plo[per] <- ceiling(mrp$plo[per]/lmul)*lmul
}
}
View(mrp)
# Algoritmo para conseguir calcular o MRP de um produto específico:
# Função CalculaLiberacaoOrdens
# Entradas da Função "Únicas":
# LMIN (Lote Mínimo) - É a quantidade mínima do produto que pode ser produzida em um período de tempo.
lmin <- 1
# LMUL (Lote Múltiplo) - A quantidade do produto a ser produzida deve ser múltipla deste número.
lmul <- 1
# ES (Estoque de Segurança) - É a quantidade mínima de estoque que se deseja manter para o produto considerado
es <- 0
# LT (Lead Time) - É o número de unidades de tempo necessário para produzir ou receber o item.
lt <- 2
# Construindo o Dataframe:
# NB - Definindo as Demandas (Necessidades Brutas) (#Input)
nb <- c(120,1234,0,0,23,324,0,24,0,124,1142,12,341,241,312)
# Colocando uma necessidade bruta do periodo atual para 0 para poder ter recebimentos programados e estoque atual da do período 1.
nb <- c(0,nb)
# Criando o Dataframe a partir disto:
mrp <- data.frame(nb)
rm(nb)
# NPER (Número de Períodos a serem calculados) - É o tamanho das demandas menos o leadtime.
# -1 porque o período 1 corresponde à semana atual (que não terá previsão de producao calculada.)
nper <- as.numeric(length(mrp$nb))
# RPini (Recebimento programado inicial) - É a quantidade de material que vou receber antes do primeiro período.
mrp["rp"] <- NA
# Aqui viria o #input do usuário indicando os recebimentos programados das primeiras semanas.
rpini <- c(0,150,1500,0)
nrpini <- as.numeric(length(rpini))
mrp$rp[1:nrpini] <- rpini
rm(nrpini)
rm(rpini)
# EPD (Estoque Projetado Disponível) - É a quantidade de material que tenho no fim do período considerado.
mrp["epd"] <- NA
# EPD - Estoque Aqui vem direto o #Input do Usuário sobre o estoque inicial
mrp$epd[1] <- 60
# PLOi (Plano de Liberação de Ordens) - Indica qual será o plano de Liberação de Ordens de Produção ou Compra para o período i.
mrp["plo"] <- NA
# Fazendo um Loop para calcular os estoques necessarios para o calculo do primeiro periodo
# quantos estoques?
nes <- lt - 1
# Só vou fazer isso se precisar calcular algum estoque disponível
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
} else {
#não faz nada
}
# Agora sim vou calcular o mrp até o fim...
# Vou calcular até que o período seja igual à soma abaixo
while (per <= nper - 1 - lt - nes){
# Estoque disponível antes da semana que estou olhando
mrp$epd[per+lt-1] <- mrp$epd[per+lt-2] + mrp$rp[per+lt-1] - mrp$nb[per+lt-1]
# Quanto preciso produzir ?
# Se o que eu vou ter antes do período + lead time form maior que o estoque de segurança
if (mrp$epd[per+lt-1] - mrp$nb[per+lt] >= es ){
# Eu não preciso produzir nada
mrp$plo[per] <- 0
# Mas se for menor que o estoque de segurança...
}else{
# Aí eu teria que produzir exatamente O que eu terei + o meu estoque de segurança
mrp$plo[per] <- es +  mrp$nb[per+lt] - mrp$epd[per+lt-1]
# No caso de Produzir, eu tenho que respeitar meu lote mínimo:
if (mrp$plo[per] < lmin ){
mrp$plo[per] <- lmin
}
# Também tenho que respeitar meu lote múltiplo
if (!is.integer(mrp$plo[per]/lmul)){
# Se deu um lote quebrado, vou produzir o múltiplo imediatamente superior à quantidade necessária
mrp$plo[per] <- ceiling(mrp$plo[per]/lmul)*lmul
}
}
View(mrp)
View(mrp)
View(mrp)
View(mrp)
View(mrp)
mrp
mrp
if (lt >= 2){
#
per <- 2
while (per <= 1 + nes ) {
# Estoque dispo = Estoque anterior + Receb. prog - Necessidade Bruta
mrp$epd[per] <- mrp$epd[per-1] + mrp$rp[per] - mrp$nb[per]
per <- per + 1
}
}
View(mrp)
mrp$epd[per+lt-1] <- mrp$epd[per+lt-2] + mrp$rp[per+lt-1] - mrp$nb[per+lt-1]
sad
View(mrp)
(per <= nper - 1 - lt - nes)
